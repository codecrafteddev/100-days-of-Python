"""
Snake Game with High Score Tracking
-----------------------------------
This game is built using Python's turtle module.

Features:
- Player controls the snake using arrow keys.
- Eating food increases the snake's length and score.
- Game tracks both current score and all-time high score.
- High score is saved in a file (data.txt) and persists across sessions.
- Snake resets automatically upon collisions with walls or its own tail.
"""

import time
from turtle import Screen, Turtle
import random

# ============================= #
#       Snake Class             #
# ============================= #
class Snake:
    """
    Snake Module
    Handles the creation, movement, and resetting of the snake.
    """

    STARTING_POSITIONS = [(0, 0), (-20, 0), (-40, 0)]
    MOVE_DISTANCE = 20
    UP = 90
    DOWN = 270
    LEFT = 180
    RIGHT = 0

    def __init__(self):
        self.segments = []
        self.create_snake()
        self.head = self.segments[0]

    def create_snake(self):
        for position in self.STARTING_POSITIONS:
            self.add_segment(position)

    def add_segment(self, position):
        new_segment = Turtle("square")
        new_segment.color("white")
        new_segment.penup()
        new_segment.goto(position)
        self.segments.append(new_segment)

    def reset(self):
        for segment in self.segments:
            segment.goto(1000, 1000)  # Move old segments off-screen
        self.segments.clear()
        self.create_snake()
        self.head = self.segments[0]

    def extend(self):
        self.add_segment(self.segments[-1].position())

    def move(self):
        for seg_num in range(len(self.segments) - 1, 0, -1):
            new_x = self.segments[seg_num - 1].xcor()
            new_y = self.segments[seg_num - 1].ycor()
            self.segments[seg_num].goto(new_x, new_y)
        self.head.forward(self.MOVE_DISTANCE)

    def up(self):
        if self.head.heading() != self.DOWN:
            self.head.setheading(self.UP)

    def down(self):
        if self.head.heading() != self.UP:
            self.head.setheading(self.DOWN)

    def left(self):
        if self.head.heading() != self.RIGHT:
            self.head.setheading(self.LEFT)

    def right(self):
        if self.head.heading() != self.LEFT:
            self.head.setheading(self.RIGHT)


# ============================= #
#       Food Class              #
# ============================= #
class Food(Turtle):
    """
    Food Module
    Handles the creation and refreshing of food at random locations.
    """

    def __init__(self):
        super().__init__()
        self.shape("circle")
        self.penup()
        self.shapesize(stretch_len=0.5, stretch_wid=0.5)
        self.color("red")
        self.speed("fastest")
        self.refresh()

    def refresh(self):
        x = random.randint(-280, 280)
        y = random.randint(-280, 280)
        self.goto(x, y)


# ============================= #
#    Scoreboard Class           #
# ============================= #
class Scoreboard(Turtle):
    """
    Scoreboard Module
    Tracks and displays the current score and the high score.
    High score is saved in a file (data.txt) so it persists across sessions.
    """

    ALIGNMENT = "center"
    FONT = ("Arial", 24, "normal")

    def __init__(self):
        super().__init__()
        self.color("white")
        self.penup()
        self.hideturtle()
        self.score = 0

        # Load high score from file
        try:
            with open("data.txt") as file:
                self.high_score = int(file.read())
        except FileNotFoundError:
            self.high_score = 0
            with open("data.txt", mode="w") as file:
                file.write("0")

        self.update_scoreboard()

    def update_scoreboard(self):
        self.clear()
        self.goto(0, 270)
        self.write(f"Score: {self.score}  High Score: {self.high_score}", 
                   align=self.ALIGNMENT, font=self.FONT)

    def reset(self):
        if self.score > self.high_score:
            self.high_score = self.score
            with open("data.txt", mode="w") as file:
                file.write(f"{self.high_score}")
        self.score = 0
        self.update_scoreboard()

    def increase_score(self):
        self.score += 1
        self.update_scoreboard()


# ============================= #
#         Main Game             #
# ============================= #
screen = Screen()
screen.setup(width=600, height=600)
screen.bgcolor("black")
screen.title("Snake Game")
screen.tracer(0)

snake = Snake()
food = Food()
scoreboard = Scoreboard()

# Controls
screen.listen()
screen.onkey(snake.up, "Up")
screen.onkey(snake.down, "Down")
screen.onkey(snake.left, "Left")
screen.onkey(snake.right, "Right")

game_is_on = True
while game_is_on:
    screen.update()
    time.sleep(0.1)
    snake.move()

    # Detect collision with food
    if snake.head.distance(food) < 15:
        food.refresh()
        snake.extend()
        scoreboard.increase_score()

    # Detect collision with wall
    if (snake.head.xcor() > 280 or snake.head.xcor() < -280 
        or snake.head.ycor() > 280 or snake.head.ycor() < -280):
        scoreboard.reset()
        snake.reset()

    # Detect collision with tail
    for segment in snake.segments[1:]:
        if snake.head.distance(segment) < 10:
            scoreboard.reset()
            snake.reset()

screen.exitonclick()

  """
Mail Merge Project
------------------
This script automates the process of creating personalized invitation letters.

Steps:
1. Reads a list of names from Input/Names/invited_names.txt
2. Reads the template letter from Input/Letters/starting_letter.txt
3. Replaces the placeholder [name] in the letter with each actual name
4. Writes a personalized letter for each name into Output/ReadyToSend/

Key Methods Used:
- readlines(): Reads all lines from a file into a list
- strip(): Removes whitespace/newlines from names
- replace(): Replaces [name] placeholder with actual names
"""

# File paths
NAMES_PATH = "./Input/Names/invited_names.txt"
LETTER_PATH = "./Input/Letters/starting_letter.txt"
OUTPUT_FOLDER = "./Output/ReadyToSend/"

# Read all invited names
with open(NAMES_PATH) as names_file:
    names = names_file.readlines()

# Read the template letter
with open(LETTER_PATH) as letter_file:
    letter_contents = letter_file.read()

# Create a personalized letter for each name
PLACEHOLDER = "[name]"

for name in names:
    stripped_name = name.strip()  # remove whitespace/newline
    new_letter = letter_contents.replace(PLACEHOLDER, stripped_name)

    # Save each letter as letter_for_<name>.txt
    with open(f"{OUTPUT_FOLDER}letter_for_{stripped_name}.txt", mode="w") as completed_letter:
        completed_letter.write(new_letter)

print("âœ… All letters have been created and saved in the ReadyToSend folder.")

