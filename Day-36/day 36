"""
Stock News Monitoring Project

This script monitors a specific stock's price change between yesterday and the day before yesterday.
If the price change exceeds a defined threshold percentage, it fetches recent news articles about the company.
Then, it sends an SMS alert summarizing the stock change and top news using Twilio.

It uses:
- Alpha Vantage API for stock data
- NewsAPI for news articles
- Twilio for SMS alerts
API keys and credentials are stored as environment variables for security.
"""

import os
import requests
from twilio.rest import Client
from datetime import datetime, timedelta
from dotenv import load_dotenv

load_dotenv()

# Load API keys and credentials from environment variables
ALPHA_VANTAGE_API_KEY = os.getenv("ALPHA_VANTAGE_API_KEY")
NEWS_API_KEY = os.getenv("NEWS_API_KEY")
TWILIO_SID = os.getenv("TWILIO_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER")
MY_PHONE_NUMBER = os.getenv("MY_PHONE_NUMBER")

STOCK = "TSLA"
COMPANY_NAME = "Tesla Inc"
PERCENTAGE_THRESHOLD = 5  # Alert if stock changes by more than 5%

def get_stock_data():
    """Fetch daily closing prices for the given stock from Alpha Vantage."""
    url = (
        f"https://www.alphavantage.co/query?function=TIME_SERIES_DAILY_ADJUSTED"
        f"&symbol={STOCK}&apikey={ALPHA_VANTAGE_API_KEY}"
    )
    response = requests.get(url)
    response.raise_for_status()
    data = response.json()
    time_series = data["Time Series (Daily)"]
    return time_series

def get_closing_price(time_series, date):
    """Extract the closing price for a specific date from the time series data."""
    return float(time_series[date]["4. close"])

def get_news():
    """Fetch recent news articles related to the company from NewsAPI."""
    url = (
        f"https://newsapi.org/v2/everything?q={COMPANY_NAME}&sortBy=publishedAt&apiKey={NEWS_API_KEY}&language=en&pageSize=3"
    )
    response = requests.get(url)
    response.raise_for_status()
    articles = response.json()["articles"]
    return articles[:3]  # Return top 3 articles

def send_sms(message):
    """Send SMS message via Twilio."""
    client = Client(TWILIO_SID, TWILIO_AUTH_TOKEN)
    msg = client.messages.create(
        body=message,
        from_=TWILIO_PHONE_NUMBER,
        to=MY_PHONE_NUMBER
    )
    print(f"SMS sent! SID: {msg.sid}")

def main():
    time_series = get_stock_data()

    # Get yesterday and day before yesterday dates in YYYY-MM-DD format
    today = datetime.now()
    yesterday = (today - timedelta(days=1)).strftime("%Y-%m-%d")
    day_before_yesterday = (today - timedelta(days=2)).strftime("%Y-%m-%d")

    # Handle weekends or holidays (skip missing dates)
    while yesterday not in time_series:
        yesterday = (datetime.strptime(yesterday, "%Y-%m-%d") - timedelta(days=1)).strftime("%Y-%m-%d")
    while day_before_yesterday not in time_series:
        day_before_yesterday = (datetime.strptime(day_before_yesterday, "%Y-%m-%d") - timedelta(days=1)).strftime("%Y-%m-%d")

    close_yesterday = get_closing_price(time_series, yesterday)
    close_day_before = get_closing_price(time_series, day_before_yesterday)

    price_diff = close_yesterday - close_day_before
    up_down = "ðŸ”º" if price_diff > 0 else "ðŸ”»"
    percent_diff = abs(price_diff) / close_day_before * 100

    if percent_diff >= PERCENTAGE_THRESHOLD:
        articles = get_news()
        message = f"{STOCK}: {up_down}{percent_diff:.2f}%\n"
        for article in articles:
            message += f"Headline: {article['title']}\nBrief: {article['description']}\n\n"
        send_sms(message)
    else:
        print(f"No significant change: {percent_diff:.2f}%")

if __name__ == "__main__":
    main()
