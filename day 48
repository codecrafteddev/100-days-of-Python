"""
Day 48 Project: Selenium Web Scraping and Automation

This script demonstrates how to use Selenium to automate a web browser. 
It opens the Python.org website, searches for "web scraping", 
and extracts the titles of the first few search results.

This project helps you learn how to interact with web pages dynamically, 
handle elements, and scrape data from sites that load content via JavaScript.
"""

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
import time

def main():
    # Initialize the Chrome WebDriver (ensure chromedriver is installed and in PATH)
    driver = webdriver.Chrome()

    try:
        # Open the python.org homepage
        driver.get("https://www.python.org")

        # Wait for page to load
        time.sleep(3)

        # Locate the search input box by its 'name' attribute
        search_box = driver.find_element(By.NAME, "q")

        # Enter the search term "web scraping"
        search_box.send_keys("web scraping")

        # Press Enter to submit the search form
        search_box.send_keys(Keys.RETURN)

        # Wait for search results to load
        time.sleep(3)

        # Find the search result titles using CSS selector
        results = driver.find_elements(By.CSS_SELECTOR, ".list-recent-events.menu li h3")

        print("Top 5 Search Results Titles:")
        for result in results[:5]:
            print("-", result.text)

    except Exception as e:
        print("An error occurred:", e)

    finally:
        # Close the browser window
        driver.quit()

if __name__ == "__main__":
    main()
